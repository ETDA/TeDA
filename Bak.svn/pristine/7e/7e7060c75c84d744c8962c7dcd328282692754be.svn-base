using System.Collections.Generic;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.X509;
using iTextSharp.text.pdf.security;

namespace TedaLibrary.Interface
{
    interface IDigitalSig
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="pdf">Pdf data in byte array</param>
        /// <param name="privateKey">Private key object</param>
        /// <param name="chain">Array of Certificate's Chain in Private Key</param>
        /// <returns>Signed pdf data in byte array</returns>
        byte[] Sign(byte[] pdf, AsymmetricCipherKeyPair privateKey, ICollection<X509Certificate> chain);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="pdf">Pdf data in byte array</param>
        /// <param name="privateKey">Private key object</param>
        /// <param name="chain">Array of Certificate's Chain in Private Key</param>
        /// <param name="crl">Certificate revocation list</param>
        /// <param name="tsaClient">Time Stamp Object use to connect Time Stamp Server</param>
        /// <returns>Signed pdf data in byte array with LTV Enable</returns>
        byte[] SignWithLTVEnable(byte[] pdf, AsymmetricKeyParameter privateKey, ICollection<X509Certificate> chain, List<ICrlClient> crl, ITSAClient tsaClient);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="pdf">Pdf data in byte array</param>
        /// <param name="crl">Certificate revocation list</param>
        /// <param name="tsaClient">Time Stamp Object use to connect Time Stamp Server</param>
        /// <returns>Pdf data in byte array with LTV Enable</returns>
        byte[] LTVEnable(byte[] pdf, List<ICrlClient> crl, ITSAClient tsaClient);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="pdf">Verified Pdf data in byte array</param>
        void VerifyDigitalSig(byte[] pdf);
    }
}
