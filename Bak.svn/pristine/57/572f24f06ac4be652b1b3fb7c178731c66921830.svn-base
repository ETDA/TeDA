using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.IO;
using iTextSharp.text.pdf.security;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.X509;
using TedaLibrary.Interface;
using iTextSharp.text;
using iTextSharp.text.pdf;
using TedaLibrary.Object;
using Org.BouncyCastle.Cms;
using Org.BouncyCastle.Security;
using Org.BouncyCastle.X509.Store;
using System.Security.Cryptography.X509Certificates;

namespace TedaLibrary.Implement
{
    class DigitalSig : IDigitalSig
    {

        public byte[] Sign(byte[] pdf, SignInformation signInfo)
        {
            PdfReader document = new PdfReader(pdf);
            MemoryStream stream = new MemoryStream();

            PdfStamper pdfStamper = PdfStamper.CreateSignature(document, stream, '\0');

            PdfSignatureAppearance signatureAppearance = pdfStamper.SignatureAppearance;
            signatureAppearance.Reason = signInfo.reason; //Reason
            signatureAppearance.Location = signInfo.location; //Location
            signatureAppearance.CertificationLevel = signInfo.certifyLevel;
            signatureAppearance.SignatureRenderingMode = PdfSignatureAppearance.RenderingMode.DESCRIPTION; //Rendering mode

            IExternalSignature signature = new X509Certificate2Signature(signInfo.cert, signInfo.hashAlgorithm);

            try
            {
                //Do signing
                MakeSignature.SignDetached(signatureAppearance, signature, signInfo.chain, null, null, null, 0, signInfo.sigType);
            }
            catch (Exception e)
            {
                throw new Exception("Cannot sign the PDF file.", e);
            }

            return stream.ToArray();
        }

        public byte[] SignWithLTVEnable(byte[] pdf, SignInformation signInfo)
        {
            PdfReader document = new PdfReader(pdf);
            MemoryStream stream = new MemoryStream();

            PdfStamper pdfStamper = PdfStamper.CreateSignature(document, stream, '\0');

            PdfSignatureAppearance signatureAppearance = pdfStamper.SignatureAppearance;
            signatureAppearance.Reason = signInfo.reason; //Reason
            signatureAppearance.Location = signInfo.location; //Location
            signatureAppearance.CertificationLevel = signInfo.certifyLevel;
            signatureAppearance.SignatureRenderingMode = PdfSignatureAppearance.RenderingMode.DESCRIPTION; //Rendering mode

            IExternalSignature signature = new X509Certificate2Signature(signInfo.cert, signInfo.hashAlgorithm);
            Boolean isTsaConnected = false;
            for (int retry = 0; retry < 5; retry++)
            {
                try
                {
                    //int hash = tsaClient.GetHashCode();
                    string testString = "test";
                    byte[] digest;
                    using (System.Security.Cryptography.SHA256Managed sha256 = new System.Security.Cryptography.SHA256Managed())
                    {
                        digest = sha256.ComputeHash(Encoding.UTF8.GetBytes(testString));
                    }
                    signInfo.tsaClient.GetTimeStampToken(digest);
                    isTsaConnected = true;
                    break;
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.StackTrace);
                }
                Console.WriteLine("retry " + (retry + 1));
            }
            if (signInfo.tsaClient != null && signInfo.crlList != null && isTsaConnected)
            {
                try
                {
                    //Do signing
                    MakeSignature.SignDetached(signatureAppearance, signature, signInfo.chain, signInfo.crlList, null, signInfo.tsaClient, 0, signInfo.sigType);
                }
                catch (Exception e)
                {
                    throw new Exception("Cannot sign the PDF file.", e);
                }
            }

            return stream.ToArray();
        }

        public byte[] LTVEnable(byte[] pdf)
        {
            PdfReader document = new PdfReader(pdf);
            MemoryStream stream = new MemoryStream();
            string signatureName = "";

            PdfStamper pdfStamper = PdfStamper.CreateSignature(document, stream, '\0');
            AcroFields fields = pdfStamper.AcroFields;
            List<string> _fieldNames = fields.GetSignatureNames();
            foreach (string _fieldName in _fieldNames)
            {
                signatureName = _fieldName;
            }

            LtvVerification v = pdfStamper.LtvVerification;
            PdfPKCS7 pkcs7 = fields.VerifySignature(signatureName);
            CrlClientOnline crl = new CrlClientOnline(pkcs7.SignCertificateChain);
            if (pkcs7.IsTsp)
            {
                v.AddVerification(signatureName, null, crl,
                    LtvVerification.CertificateOption.SIGNING_CERTIFICATE,
                    LtvVerification.Level.CRL,
                    LtvVerification.CertificateInclusion.NO);
            }
            else
            {
                v.AddVerification(signatureName, null, crl,
                    LtvVerification.CertificateOption.WHOLE_CHAIN,
                    LtvVerification.Level.CRL,
                    LtvVerification.CertificateInclusion.NO);
            }

            return stream.ToArray();
        }

        public void VerifyDigitalSig(byte[] pdf, string signatureName)
        {
            PdfReader pdfReader = new PdfReader(pdf);

            AcroFields acroField = pdfReader.AcroFields;

            if (signatureName == null || "".CompareTo(signatureName) != 0)
            {
                signatureName = acroField.GetSignatureNames().Last();
            }

            PdfPKCS7 pdfP7 = acroField.VerifySignature(signatureName);

            if (pdfP7 == null) throw new NullReferenceException("Invalid signatureName:" + signatureName);

            if (!pdfP7.Verify()) throw new PdfException("Unable to verify specified signature field, specify signature invalid");

            byte[] pkcs7Signatue = pdfP7.GetEncodedPKCS7();
            CmsSignedData signedData = new CmsSignedData(pkcs7Signatue);

            // Get signer certificate from CMSSignedData
            IX509Store x509Certs = signedData.GetCertificates("Collection");
            ICollection cerlist = x509Certs.GetMatches(null);
            IEnumerator cEnum = cerlist.GetEnumerator();
            ArrayList _chain = new ArrayList();
            while (cEnum.MoveNext())
            {
                Org.BouncyCastle.X509.X509Certificate cer = (Org.BouncyCastle.X509.X509Certificate)cEnum.Current;
                X509Certificate2 cer2 = new X509Certificate2(cer.GetEncoded());
                _chain.Add(cer2);
            }

            X509Certificate2[] certChain = (X509Certificate2[])_chain.ToArray(typeof(X509Certificate2));
            validateSignature(signedData, certChain[0]);
        }

        private void validateSignature(CmsSignedData signedData, X509Certificate2 certificate)
        {
            bool isValid = false;

            SignerInformationStore signers = signedData.GetSignerInfos();
            IEnumerator it = signers.GetSigners().GetEnumerator();
            if (it.MoveNext())
            {
                SignerInformation signer = (SignerInformation)it.Current;
                Org.BouncyCastle.X509.X509Certificate cer = DotNetUtilities.FromX509Certificate(certificate);
                isValid = signer.Verify(cer);
            }

            if (!isValid)
            {
                throw new Exception("Signature is not valid");
            }

        }

    }
}
